[tool.ruff]
# Директории, файлы в которых ruff будет игнорировать
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Длина строки и длина отступа
line-length = 79
indent-width = 4

# Какая версия python используется
# Если не указать то, ruff # Если не указать, будет пытаться угадать версию анализируя файлы. 
# Может сделать неверные выводы о доступности синтаксиса, особенно в проектах, поддерживающих старые версии Python
target-version = "py312"

[tool.ruff.lint]
# Какие правила мы будем использовать или какие правила будем игнорировать
# После изменений neovim должен быть перезапущен
select = ["E", "F", "D", "Q", "COM"]
ignore = []

# Разрешить автоматическое исправление всех включённых правил (при запуске с --fix)
fixable = ["ALL"]
unfixable = []

# Разрешить неиспользуемые переменные, начинающиеся с подчёркивания
# Если имя переменной соответствует этому шаблону, не ругайся, даже если переменная не используется.
# Это касается т.н. "мусорных переменных" в контексте PEP8
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Одинарные или двойные кавычки (должен быть активен плагин Q)
quote-style = "double"

# Проверяет последнюю запятную в структурах (должен быть активен плагин COM)
skip-magic-trailing-comma = false

# Aвтоматическое форматирование кода внутри docstrings.
# Ruff попытается отформатировать код внутри таких комментариев, так же как он форматирует обычный код
docstring-code-format = false

# Управляет максимальной длиной строки кода внутри docstring
docstring-code-line-length = "dynamic"

# Like Black, automatically detect the appropriate line ending.
# Указывает инструменту автоматически определять и использовать подходящий тип окончания строки в файлах, которые он обрабатывает
# line-ending = "auto"

# Like Black, indent with spaces, rather than tabs.
# Указывает инструменту использовать пробелы для отступов вместо табуляции при форматировании кода.
# indent-style = "space"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
